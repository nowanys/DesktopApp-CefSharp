<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/oT0AiLiGcjGt
        Iv9JvT+P//n/B9/D4iNcqFTbJ68X5prKnJZArzT/RL09lgBDAAAAAAAASoVDAGiPY2krpBv/MrcoaSev
        FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKvB
        rAC0xrY2RK437zCsH+tYpk3BWaRPzDGkIf4jrxKtrsuycDqsLf9JukCj79P5GvXp9whOh0cAZo5gaSWh
        Ev9CtTd7/9X/Ff3w/gT45/kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP//
        /wDjspEH78y0Bf/o/wpotGG1IaoN/0K3M9RArjLqHakI/z+3L2q7yLhqOqws/zSrI/VSrkbhbL9kravg
        qypmjmBnJKEQ/ziqKPBUsEjcdMJslq/dsCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOmE
        RQDvpnsK8JlhVO2UW7ful2Ce/YxXGZO+lGc0rCX8acJiiGOpXtE2qhf+0JtSyM+VYNk4pSD/Orgs0lvB
        UrEyriD+Q7o1pWyVZ24koRD/PrgtwFK7Rrsurh3+VcBKowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPO4
        jwD3wZwE76d2Qe6TWa3ujU717JVd/+2QVP/vkFO64KyMVk6vQuBLsUDqPqc0+GyiJv/tk1r/0JJa/zag
        GP9urTvF6KaaYEemO+wrsRnScJ5rfyWhEf8xtyRptLy3UjmnKvwssh7ZAAAAAAAAAAAAAAAAAAAAAAAA
        AADiqX4AvMCyAe2RVWrukFLt7pVb/+24lf/y4df/88iu/+6VW//xjVDmm5ZK8SSlE/8kpw//rqdU//bR
        vf/U08T/MqUj/1CgIv9ukDT2KaMW/zK1IrFrlmZxJKEQ/0qzPdtaqVHgJKYR/zK1JKoAAAAAAAAAAAAA
        AAAAAAAAAAAAAPS6kwDzuJAW7pNX1O2bZP/13c7/9/b3//f4+f/49/j/9NzM//Owhv/cm2H/dbNM/3rI
        av/m5NH/+vj6/+Tr5v99yXj/ZcVb/2isNv9fnS3/bb1noI+wjVBCsje/OLYswzu2Lb4ztCWCQL0+HgAA
        AAAAAAAApKyjALa7tRqTpZBAkKmMQc3UxDHvl2C56Zdi/9jZyv/e6t//6+3r/9bi1v/l7uf/7uzq/+be
        0//r5N3/4OXg/+3v7//a5dr/7vLv/+Hn4//V28f/7Jpm/52GPP9QtETSqcyrWcHgySLG+usI1vjtCP//
        /wH///8AAAAAAAAAAABlkmAAgqF/ZUahOfRTrkbfXL1W1cisbtKchT3/W7FP/4TLgv+8073/ebp2/2K7
        W/+ZwZb/brBn/32yeP+IxYL/qMWm/1u3Uv+lyaT/Ya5a/2a8Wv+Knjz/lpRP/zarKvFTtUvhW71RsKfi
        qw2b3J4AAAAAAAAAAAAAAAAAAAAAAFWQTwBznW5rN6sr5njUeD5duFixZqIx/1mRJv9Xu1H/dLxv/6bN
        pf91sXD/VrhL/46+i/81nib/RrA5/9Pq0v+Ux5P/fcx3/5fAlP9owl7/ytjG/0uiLv98kj7/Nq4ltZTA
        k4A6ry7iL7chHjy5MgAAAAAAAAAAAAAAAAAAAAAAVpBQAHSeb2s4qizia9JxHnyvd5lSpiv/g6BF/1y5
        Vf9Rr0f/j8WL/0uxQf+IwoD/oqZ1/0uYH/9jpjb/nMaM/2mvXv9Uukr/o8yi/1u8UP91unH/XKUx/4yI
        Nf9BsDTrZLRh2zSvJ9FLw0MXUsNNAAAAAAAAAAAAAAAAAKqcjQBIjUYAdZprbTWpKvRhq1mpQZsr5Xir
        Pv/n18H/tuC1/73ju//t6uD/wLFw/6uaQv+hfzj/WJUd/8uZUf+4mk//gJ08/2W/Vf/d7d//yuXI/6bd
        pP/V067/15dc/7WhVfuQqk++fLFQXt6qiRC0rnYA1LSZAAAAAAAAAAAA6pxqAPWbaxrNkFfDhpw2/3+h
        Nv+crFL/5Ni6//j29//59/r/+fT1//C2kv/vjE//955q/82pe/+JtV3/9sai//mwhv/mlVj/2pxe//LZ
        yf/5+Pr/+vf6//j39//1077/85tm//CMT/TrjFDi6pNZtuqZZRvqmmcAAAAAAAAAAADrj1QA6pRcV++O
        Uvzzq3//9MWn//jl3P/39vf/9vb2//b3+P/y18b/7ZBT//GeaP/8zK///tS8//vTuf//1Lz//9S8//m9
        l//wj1L/7KZ3//Tv7P/29vf/9vb2//X39//15tv/8cWm//KrfP/uj1H86JVeV+yQVAAAAAAAAAAAAOpz
        JgDumGB77pNZ//Pg0//2+fr/9vf4//b29v/29vb/9vb2/++2kf/ujU7/+L6Z///Uvf//07v//9O7///T
        u///07v//tK5//OldP/tkVT/8d3N//b4+P/29vb/9vb2//b3+P/2+fr/9N/T/+6TWf/tmV976nMkAAAA
        AAAAAAAA/H4VAOuPVZbwmWH/9enh//b3+P/29vb/9vb2//b29v/28/D/8KZ4/++UWP/8y63//9S8///T
        u///07v//9O7///Tu///1b3/9raM/+6MTf/wzLT/9fj5//b29v/29vb/9vb2//b39//16eD/75lh/+qP
        VZb5ghEAAAAAAAAAAADlgxkA7I9Ulu+ZYf/16uL/9vf3//b29v/29vb/9vb2//bz8f/vqHz/75NW//zK
        q///1Lz//9O7///Tu///07v//9O7///Uvf/1s4f/7YxN/+/Ouf/2+Pn/9vb2//b29v/29vb/9vf3//bp
        4P/wmWD/8I5VluSCEgAAAAAAAAAAAOxyJgDvl1977pNZ//Lh1P/2+fv/9vf4//b29v/29vb/9vf3//G9
        nf/ujE3/9raO///Uvf//07v//9O7///Tu///1Lz//dC2//Gfav/ulFn/8+LW//b3+P/29vb/9vb2//b3
        +P/2+fv/9ODU/++TWf/xl2F76nIkAAAAAAAAAAAA7Y9TAOuSWlfvjlH876yC//DHrf/z5t7/9vf3//b2
        9v/29/j/9N/T/+6VW//vlVv/+cKg//7Uu///1L3//9S9//3Qtv/0sIT/7YxO//Cyiv/29PL/9vb2//b2
        9v/29/f/8ubd/+7HrP/uq4D/7o9S/OqUXVjskVYAAAAAAAAAAADllV0A5ZZfG+ySV7zui03l7oxO+eyc
        Z//y1sP/9ff3//b29v/29fX/8smt/+6QVP/vk1j/861+//a6lP/1to//8aFv/+6MTf/uoG3/8+Ta//b3
        +P/29vb/9/f2//PWwv/tnGj/7Y5S/O2MT+juk1rA7qV4Ie6jdAAAAAAAAAAAAMeCTgDb//8A6qB0E+mN
        VyLplF9a6oxP0O+XX//028v/9vf4//b29v/29fT/8M64/+2ebP/tjlH/7oxN/+2MTv/uklj/76+H//Tj
        2P/29/j/9vb2//b3+P/028r/7pde/+yLTs/voHBj7KBxKOyichP7//8A2YlkAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAsLeQAP2ZYADqmGU97o1P6PCtgP/28/D/9vb2//b29v/19/f/8+vm//HWw//yy7H/8s23//Tf
        0//18/H/9vf4//b29v/29vb/9fPw//Ctf//ti0zj6Y1VN/eMSQDMjXEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA67KMAO7RyQPtlFyo7pdf//Pm3f/29/j/9vb2//b29v/29/f/9vj4//b4
        +f/2+Pn/9vf4//b29v/29vb/9vb2//b3+P/05tz/75df/+6PUp/VpZcB4o9hAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2hgAAO6jcJbsklf/8N3Q//b3+P/29vb/9vb2//b2
        9v/29vb/9vb2//b29v/29vb/9vb2//b29v/29vb/9vf4//Pd0P/tklb/75hhh+poDwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPG+oQDxx7MH7ZRas++bY//16uL/9vf4//b2
        9v/29vb/9vf3//b39//18/H/9vPw//b39//29/j/9vb2//b29v/29/f/9eri/+6bZP/sjlOr3rSeBeOw
        kQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9rOJAPaxhhbvkVbU7Ztk//Hd
        zv/29vX/9vf4//b3+P/z6uP/78Oo/+6pe//up3n/8L+f//Pm3f/29/f/9vf4//b29v/y3dD/7ppk/+6S
        WNTutpMW7riWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8oWgA/72WAvCd
        anntkFTu7ZVd//G5lP/z5Nn/8tfE/+6fbP/tjlL5645Tz+mNUcjtjlHz75xm//LRu//z5Nn/8ruW/+6W
        Xv/sjlLt7ZdgcvLRsALwpW4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADqtZIA7syzBeiUYTrrjlKk7I1P9O6YYP/tlVv/7Y9T4uuZZGXorosU4aN9Demdb1Pqj1bT7pJY/+6X
        X//tjVD27JBXrOGRXzrkqo4E6KSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA56JzAOKfcgnpmWRU7ZFYtuqOU7Drn2w87P//Ad+tlwCth24A/7eHAOmm
        fTDtlV+p7ZJZtuqeb1zen3cL0XQ5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+///APD//wDnn3oH35pxB8n58QDb5tYAAAAAAAAA
        AAAAAAAA3AAAAOGnhAXlpIQH/P//AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gBx//4AEH/wAAA/4AAAP4AAAD8AAAA/AAAAOAAAAHgAAAH4AAAB+AA
        AAfgAAAHwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD/AAAP/wAAD/+AAB//AAAP/wA
        AD/8AAA//gAAf/+Bwf//w+P///////////8=
</value>
  </data>
</root>